// Generated by CoffeeScript 1.6.3
/*
Article Model
*/


(function() {
  var Article, ObjectId, Para, Schema, Topic, User, moment, mongoose, url;

  moment = require('moment');

  url = require('url');

  mongoose = require('mongoose');

  Schema = mongoose.Schema;

  ObjectId = Schema.ObjectId;

  Topic = require('./topic');

  User = require('./user');

  Para = new Schema({
    en: String,
    cn: String,
    type: String,
    state: Boolean
  });

  Article = new Schema({
    _id: ObjectId,
    creator: {
      type: ObjectId,
      ref: 'User'
    },
    enTitle: String,
    cnTitle: String,
    url: String,
    author: String,
    completion: {
      type: Number,
      "default": 0,
      min: 0,
      max: 100
    },
    createTime: {
      type: Date,
      "default": new Date()
    },
    updateTime: {
      type: Date,
      "default": new Date()
    },
    paraList: [Para],
    annotationList: [String],
    collectCount: {
      type: Number,
      "default": 0,
      min: 0
    },
    commentCount: {
      type: Number,
      "default": 0,
      min: 0
    }
  });

  Article.virtual('urlHost').get(function() {
    return url.parse(this.url).hostname;
  });

  Article.path('createTime').get(function(time) {
    return moment(time).fromNow();
  });

  Article.statics.getHot = function(num, callback) {
    return this.find().sort({
      commentCount: -1,
      collectCount: -1
    }).limit(num).exec(callback);
  };

  Article.statics.getNew = function(num, callback) {
    return this.find().populate('creator').populate('topic').sort({
      createTime: -1
    }).limit(num).exec(callback);
  };

  Article.statics.getById = function(articleId, callback) {
    return this.findById(articleId).populate('creator').exec(callback);
  };

  Article.statics.getByUser = function(userId, callback) {
    return this.find({
      creator: userId
    }).populate('creator').exec(callback);
  };

  Article.statics.getByTopic = function(topicId, callback) {
    return this.find({
      topic: topicId
    }).populate('creator').populate('topic').exec(callback);
  };

  Article.statics.add = function(articleId, userId, enTitle, content, articleUrl, author, callback) {
    var article, p, paras, _i, _len;
    article = new this({
      _id: articleId,
      creator: userId,
      enTitle: enTitle,
      cnTitle: '待译标题',
      url: articleUrl,
      author: author,
      abstract: '',
      paraList: []
    });
    paras = content.split('\n');
    for (_i = 0, _len = paras.length; _i < _len; _i++) {
      p = paras[_i];
      if (p.trim() !== '') {
        article.paraList.push({
          en: p.trim(),
          cn: '',
          type: 'text',
          state: false
        });
      }
    }
    return article.save(callback);
  };

  Article.statics.edit = function(articleId, article, callback) {
    return this.update({
      _id: articleId
    }, {
      enTitle: article.enTitle,
      cnTitle: article.cnTitle,
      author: article.author,
      url: article.url,
      abstract: article.abstract,
      completion: article.completion,
      paraList: article.paraList
    }, callback);
  };

  Article.statics.removeById = function(articleId, callback) {
    return this.findByIdAndRemove(articleId, function(err, article) {
      return Topic.reduceArticleCount(article.topic, function(err) {
        return User.reduceArticleCount(article.creator, callback);
      });
    });
  };

  Article.statics.addCommentCount = function(articleId, callback) {
    return this.update({
      _id: articleId
    }, {
      $inc: {
        commentCount: 1
      }
    }, callback);
  };

  Article.statics.reduceCommentCount = function(articleId, callback) {
    return this.update({
      _id: articleId
    }, {
      $inc: {
        commentCount: -1
      }
    }, callback);
  };

  module.exports = mongoose.model('Article', Article);

}).call(this);
