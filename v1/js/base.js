/* 全局变量--------------------------------------------------------------------*/var GLOBAL = {};//段落类型GLOBAL.itemType = {	PARA     : "para",			//段落	MAINHEAD : "mainHead",		//主标题	SUBHEAD  : "subHead", 		//次级标题	IMAGE    : "image",			//图片	QUOTE    : "quote",			//引语	CODE     : "code",			//代码	LIST     : "list"			//列表};//常量，段落的翻译状态GLOBAL.translationState = {	PREFECT  : "perfect",	UNDO     : "undo"};//常量，段落之间的间距GLOBAL.DISTANCE = 20;//公式生成服务器GLOBAL.formulaServer = "http://latex.codecogs.com/gif.latex?";/* 工具型函数--------------------------------------------------------------------*//**  * Get the time of a certain format. * * @method getTime * @param {none}  * @return {String} The time. *//* function getTime(){	var date = new Date();	return date.getFullYear() + "/" + (date.getMonth() + 1) + "/" + date.getDate();	} *//**  * Remove all the HTML tags from the article except <A> and <SUP>. * * @method getPureText * @param {String} str - the article to be processed.  * @return {String} The processed article .  */function getPureText(str){	return jQuery.trim(str.replace(/<(?!\/?A|\/?MARK|\/?B|\/?IMG|\/?I)[^<>]*>/ig, '').replace(/<br>/ig, '').replace(/(&nbsp;)+/g, ' '));}/**  * To set the url string which contains argument. * * @method setUrlString * @param {String} url - The main url string.  * @param {Object} args - The argument object.   * @return {String} The url string.  */function setUrlString(url, args){	//初始化url字符串	var urlStr = "";	urlStr += url;		//添加参数	if(args){		urlStr += "?";		for(var name in args){			var value = args[name];			urlStr += (encodeURIComponent(name) + "=" + encodeURIComponent(value));		}	}		return urlStr;}/**  * Get the arguments from the query string in the url. * * @method getQueryStringArgs * @param {none}  * @return {Object} The argument object. */function getQueryStringArgs(){	//取得查询字符串并去掉开头的问号	var qs = (location.search.length>0 ? location.search.substring(1) : "");		//保存数据对象	var args = {};		//取得每一项	var items = qs.split("&");	var item = null,		name = null,		value = null;		//逐个将每一项添加到 args 对象中	for(var i=0; i<items.length; i++){		item = items[i].split("=");		name = decodeURIComponent(item[0]);		value = decodeURIComponent(item[1]);		args[name] = value;	}		return args;}/* 数据操作层--------------------------------------------------------------------*//**  * Get all the data items in a table. * * @method getDataList * @param {String} table - The name of the table.   * @return {Array} The array containing all the items.  */function getDataList(table){	var dataList = [];	for(var i=0; i<localStorage.length; i++){		var tokens = localStorage.key(i).split('_');		if((tokens[0] == "Data") && (tokens[1] == table)){			dataList.push(localStorage.getItem(localStorage.key(i)));		}	}	return dataList;}/**  * To get the articles list which contains brief info. * * @method getBriefArticleList * @param {none}  * @return {Array} */function getBriefArticleList(){	var articleList = [];	for(var i=0; i<localStorage.length; i++){		var tokens = localStorage.key(i).split('_');		if((tokens[0] == "Data") && (tokens[1] == "Article")){			var article = JSON.parse(localStorage.getItem(localStorage.key(i)));						//返回包含必要的数据信息的数组			articleList.push({				"enTitle":article.enTitle,				"createTime":article.createTime,				"url":article.url,				"complete":article.complete			});		}	}		return articleList;}/**  * Get the data item from a table by the key. * * @method getDataItem * @param {String} table - The name of the data table. * @param {String} key - The key of the data in the local storage.   * @return {String} the data item.  */function getDataItem(table, key){	return localStorage.getItem("Data_" + table + "_" + key);}/**  * Delete the data item from a table by the key. * * @method deleteDataItem * @param {String} table - The name of the data table. * @param {String} key - The key of the data in the local storage.   * @return {none} */function deleteDataItem(table, key){	localStorage.removeItem("Data_" + table + "_" + key);}/**  * Insert a data item into a table. * * @method addDataItem * @param {String} table - The name of the data table. * @param {String} key - The key of the data.   * @param {String} value - the value of the data. * @return {none} */function addDataItem(table, key, value){	localStorage.setItem("Data_" + table + "_" + key, value);}/**  * Update a data item in a table. * * @method updateDataItem * @param {String} table - The name of the data table. * @param {String} key - The key of the data.   * @param {String} value - the value of the data. * @return {none} */function updateDataItem(table, key, value){	addDataItem(table, key, value);}/**  * To check whether or not the key exists in the table. * * @method isDataItemExist * @param {String} table - The name of the data table.  * @param {String} key - The key of the data item.  * @return {Bool} True means the key exists in the table, false means not.  */function isDataItemExist(table, key){	for(var i=0; i<localStorage.length; i++){		var tokens = localStorage.key(i).split('_');		if((tokens[0] == "Data") && (tokens[1] == table) && (tokens[2] == key)){			return true;		}	}	return false;}/* 配置操作层--------------------------------------------------------------------*/function getConfig(configName){	return localStorage.getItem("Config_" + configName);}function addConfig(configName, configContent){	localStorage.setItem("Config_" + configName, configContent);}function deleteConfig(configName){	localStorage.removeItem("Config_" + configName);}function updateConfig(configName, configContent){	deleteConfig(configName);	addConfig(configName, configContent);}