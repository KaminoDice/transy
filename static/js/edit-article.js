// Generated by CoffeeScript 1.6.3
(function() {
  var SAVE_INTERVAL, adjustHeight, buildArticleObj, g, geneParaHTML, hideSaveState, isArticleEqual, saveArticle, setEndOfContenteditable, showSaveState;

  g = {
    clickItem: null,
    articleObj: null,
    saveTick: 0
  };

  SAVE_INTERVAL = 60000;

  $(window).load(function() {
    return $('.para').each(function() {
      return adjustHeight($(this));
    });
  });

  $(function() {
    g.saveTick = setTimeout(saveArticle, SAVE_INTERVAL);
    $('.para').each(function() {
      return adjustHeight($(this));
    });
    g.articleObj = buildArticleObj();
    $('.en, .cn').keyup(function() {
      return adjustHeight($(this).parent());
    });
    $('.en, .cn').blur(function() {
      return adjustHeight($(this).parent());
    });
    imagesLoaded($('.para')).on('progress', function(instance, image) {
      return adjustHeight($(image.img).parents('.para'));
    });
    $('.para').mouseover(function() {
      $('.focus-flag').css('visibility', 'hidden');
      return $(this).find('.focus-flag').css('visibility', 'visible');
    });
    $(document).on('click', '.ec-divider', function(e) {
      var divider;
      divider = e.target;
      if ($(divider).attr('data-state') === 'false') {
        return $(divider).attr('data-state', 'true');
      } else {
        return $(divider).attr('data-state', 'false');
      }
    });
    $('.save-btn').click(saveArticle);
    $(document).keydown(function(e) {
      if (e.ctrlKey && e.which === 83) {
        e.preventDefault();
        return saveArticle();
      }
    });
    $(window).on('beforeunload', function() {
      if (!isArticleEqual(g.articleObj, buildArticleObj())) {
        return "更改尚未保存，";
      }
    });
    $(document).on('keydown', '.para', function(e) {
      var divider, next, para;
      if ($(e.target).hasClass('para')) {
        para = e.target;
      } else {
        para = $(e.target).parents('.para').first()[0];
      }
      if (e.ctrlKey && e.which === 13) {
        divider = $(para).find('.ec-divider');
        if (divider.attr('data-state') === 'false') {
          divider.attr('data-state', 'true');
        } else {
          divider.attr('data-state', 'false');
        }
      }
      if (e.which === 9) {
        e.preventDefault();
        next = $(para).nextAll("[data-type!='image']").first().find('.cn');
        next.focus();
        return setEndOfContenteditable(next[0]);
      }
    });
    $(document).on('contextmenu', '.para', function(e) {
      e.preventDefault();
      if ($(e.target).hasClass('para')) {
        g.clickItem = e.target;
      } else {
        g.clickItem = $(e.target).parents('.para').first()[0];
      }
      if ($(g.clickItem).attr('data-type') === 'image') {
        $('.context-menu').find('.only-for-text').hide();
      } else {
        $('.context-menu').find('.only-for-text').show();
      }
      return $('.context-menu').css({
        top: e.clientY + 2 + 'px',
        left: e.clientX + 2 + 'px',
        display: 'block'
      });
    });
    $(document).click(function() {
      return $('.context-menu').hide();
    });
    return $('.context-menu').click(function(e) {
      var c, textareaHTML;
      c = $(e.target).attr('class');
      switch (c) {
        case 'header':
        case 'text':
        case 'quote':
        case 'code':
        case 'list':
          $(g.clickItem).attr('data-type', c);
          return adjustHeight($(g.clickItem));
        case 'up':
        case 'down':
          $('.new-para-wap').detach();
          textareaHTML = "<div class='new-para-wap clearfix'>\n  <textarea class='new-para-textarea' placeholder='文本 / 图片地址' rows=4></textarea>\n  <div class='btn-wap'>\n    <button class='ok-btn' title='确定'><i class='icon-checkmark' /></button>\n    <button class='cancel-btn' title='取消'><i class='icon-cancel-2' /></button>\n  </div>\n</div>";
          if (c === 'up') {
            $(g.clickItem).before(textareaHTML);
          } else {
            $(g.clickItem).after(textareaHTML);
          }
          $('.new-para-textarea').focus();
          $('.ok-btn').click(function() {
            var addContent, imageHTML, textHTML;
            addContent = $('.new-para-textarea').val().trim();
            if (addContent === "") {
              return $('.new-para-wap').detach();
            }
            if (addContent.match(/\b(http|https):\/\//) && addContent.match(/.(gif|png|jpeg|jpg|jpeg|bmp)\b/)) {
              imageHTML = geneParaHTML('image', addContent);
              if (c === 'up') {
                $(g.clickItem).before(imageHTML);
                imagesLoaded($(g.clickItem).prev(), function() {
                  return adjustHeight($(g.clickItem).prev());
                });
              } else {
                $(g.clickItem).after(imageHTML);
                imagesLoaded($(g.clickItem).next(), function() {
                  return adjustHeight($(g.clickItem).next());
                });
              }
            } else {
              textHTML = geneParaHTML('text', addContent);
              if (c === 'up') {
                $(g.clickItem).before(textHTML);
                adjustHeight($(g.clickItem).prev());
              } else {
                $(g.clickItem).after(textHTML);
                adjustHeight($(g.clickItem).next());
              }
            }
            return $('.new-para-wap').detach();
          });
          return $('.cancel-btn').click(function() {
            return $('.new-para-wap').detach();
          });
        case 'remove-para':
          return $(g.clickItem).detach();
      }
    });
  });

  /*
  Generate new para HTML code
  @method geneParaHTML
  @params {String} content - the content of new para
  */


  geneParaHTML = function(type, content) {
    var html;
    if (type === 'image') {
      return html = "<div data-type='image' class='para clearfix'>\n  <div class='en'><img src='" + content + "' /></div\n  ><div class='ec-divider' data-state='true'></div\n  ><div class='cn'><img src='" + content + "' /></div>\n</div>";
    } else if (type === 'text') {
      return html = "<div data-type='text' class='para clearfix'>\n  <div class='en' contenteditable='true'>" + content + "</div\n  ><div class='ec-divider' data-state='false'></div\n  ><div class='cn' contenteditable='true'></div>\n</div>";
    }
  };

  /*
  Save article, triggle when click the save btn, or press Ctrl-S
  @method saveArticle
  */


  saveArticle = function() {
    var articleId, currArticleObj;
    clearTimeout(g.saveTick);
    currArticleObj = buildArticleObj();
    if (isArticleEqual(g.articleObj, currArticleObj)) {
      g.saveTick = setTimeout(saveArticle, SAVE_INTERVAL);
      showSaveState();
      hideSaveState();
      return;
    }
    showSaveState();
    g.articleObj = currArticleObj;
    articleId = $('.title').data('article-id');
    return $.ajax({
      url: "/article/" + articleId + "/edit",
      method: 'POST',
      data: {
        article: g.articleObj
      },
      success: function(data) {
        if (data.result === 1) {
          hideSaveState();
          return g.saveTick = setTimeout(saveArticle, SAVE_INTERVAL);
        }
      }
    });
  };

  /*
  Show save state
  @method showSaveState
  */


  showSaveState = function() {
    $('.save-state .state-waiting').show();
    $('.save-state .state-ok').hide();
    return $('.save-state').animate({
      top: '-32px',
      200: 200
    });
  };

  /*
  Hide save state
  @method hideSaveState
  */


  hideSaveState = function() {
    $('.save-state .state-waiting').hide();
    $('.save-state .state-ok').show();
    return setTimeout("$('.save-state').animate({top: '0px'}, 200)", 1000);
  };

  /*
  Whether the two object is equal
  @method isArticleEqual
  @param {Object} articleA - the article Object A
  @param {Object} articleA - the article Object B
  @return {Boolen} true means equal, false not
  */


  isArticleEqual = function(articleA, articleB) {
    return JSON.stringify(articleA).length === JSON.stringify(articleB).length;
  };

  /*
  Build article object from the page
  @method buildArticleObj
  @return {Object} the article object
  */


  buildArticleObj = function() {
    var article, completeChar, p, totalChar, _i, _len, _ref;
    article = {
      enTitle: $('.en-title').val().trim(),
      cnTitle: $('.cn-title').val().trim(),
      author: $('.author').val().trim(),
      url: $('.url').val().trim(),
      paraList: []
    };
    $('.para').each(function() {
      var cn, en, state, type;
      type = $(this).attr('data-type');
      if (type === 'image') {
        en = $(this).find('.en img').attr('src');
        cn = en;
      } else {
        en = $(this).find('.en').text().trim();
        cn = $(this).find('.cn').text().trim();
      }
      if ($(this).find('.ec-divider').attr('data-state') === 'true') {
        state = true;
      } else {
        state = false;
      }
      return article.paraList.push({
        en: en,
        cn: cn,
        type: type,
        state: state
      });
    });
    totalChar = 0;
    completeChar = 0;
    _ref = article.paraList;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      totalChar += p.en.length;
      if (p.state) {
        completeChar += p.en.length;
      }
    }
    article.completion = Math.ceil(completeChar / totalChar * 100);
    return article;
  };

  /*
  Dynamic change the height of the divider bar
  @method adjustHeight
  @param {DOM Div Element} para - the div element has class 'para'
  */


  adjustHeight = function(para) {
    var cnHeight, dvHeight, enHeight;
    enHeight = para.find('.en').innerHeight();
    cnHeight = para.find('.cn').innerHeight();
    dvHeight = enHeight > cnHeight ? enHeight : cnHeight;
    return para.find('.ec-divider').css('height', dvHeight + 15 + 'px');
  };

  /*
  Move blink to the end of a ccontenteditable element, see also:
  http://stackoverflow.com/questions/1125292/how-to-move-cursor-to-end-of-contenteditable-entity/3866442#3866442
  @method setEndOfContenteditable
  @params {DOM Element} element - contenteditable DOM Element
  */


  setEndOfContenteditable = function(element) {
    var range, selection;
    if (document.createRange) {
      range = document.createRange();
      range.selectNodeContents(element);
      range.collapse(false);
      selection = window.getSelection();
      selection.removeAllRanges();
      return selection.addRange(range);
    }
  };

}).call(this);

/*
//@ sourceMappingURL=edit-article.map
*/
